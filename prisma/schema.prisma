// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  ADMIN
  USER
  DENIED
}

model User {
  id              Int       @default(autoincrement())
  firstName       String    @map("first_name") @db.VarChar(50)
  lastName        String    @map("last_name") @db.VarChar(50)
  email           String    @unique
  password        String
  phoneNumber     String    @map("phone_number")
  confirmPassword String    @map("confirm_password")
  avatar          String?
  gender          Int       @default(0)
  isDeleted       Boolean   @default(false) @map("is_deleted")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")
  role            Role      @relation(fields: [roleId], references: [id])
  roleId          Int       @default(0) @map("role_id")

  new New[]

  @@id([id])
  @@map("user")
}

model Role {
  id        Int      @id @default(autoincrement())
  role      RoleEnum @unique @default(USER) @map("role")
  user      User[]
  createdAt DateTime @default(now()) @map("created_at")

  @@map("role")
}

model New {
  id        Int       @id @default(autoincrement())
  caption   String    @db.VarChar(255)
  content   String    @db.Text
  thumbnail String
  status    Int       @default(1)
  position  Int
  isDeleted Boolean   @default(false) @map("is_deleted")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int       @map("author_id")

  @@map("new")
}
